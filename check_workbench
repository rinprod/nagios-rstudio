#!/usr/bin/env python3
"""
A tool for running Nagios tests against RStudio Workbench
"""

import argparse
import configparser
import sys
import urllib.request


PARSER = argparse.ArgumentParser()
PARSER.add_argument("-H", "--hostname", help="Hostname of the system to check")
PARSER.add_argument("-w", "--warning", help="Warning threshold", default=40)
PARSER.add_argument("-c", "--critical", help="Critical threshold", default=70)
PARSER.add_argument("-o", "--option", help="item to check")
PARSER.add_argument("-P", "--path", help="set a url path", default="")
PARSER.add_argument(
    "-D", "--dryrun", help="Don't perform the check", action="store_true"
)
PARSER.add_argument(
    "-i", "--insecure", help="use http instead of https", action="store_true"
)
PARSER.add_argument("-t", "--timeout", help="timeout in seconds", default=5)

# Add a debug flag
PARSER.add_argument("-d", "--debug", help="enable debug mode", action="store_true")

ARGV = PARSER.parse_args()


def debug_msg(*args):
    """prints the message if the debug option is set"""
    if ARGV.debug:
        print("DEBUG: {}".format("".join(args)))


debug_msg("Debug option is set")


# RStudio workbench docs on the health-check endpoint
# https://docs.rstudio.com/ide/server-pro/auditing_and_monitoring/server_health_checks.html

AVAILABLE_ITEMS = [
    "active-sessions",
    "idle-seconds",
    "cpu-percent",
    "memory-percent",
    "swap-percent",
    "load-average",
    "license-status",
    "license-days-left",
    "license-allow-product-usage",
]

if ARGV.option not in AVAILABLE_ITEMS:
    print("UNKNOWN: Invalid option")
    sys.exit(3)

if ARGV.insecure is True:
    TRANSPORT = "http:/"
else:
    TRANSPORT = "https:/"


URL_COMPONENTS = [
    TRANSPORT,
    ARGV.hostname,
    ARGV.path,
    "health-check",
]

FULL_URL = "/".join(URL_COMPONENTS)
debug_msg("FULL_URL is: {}".format(FULL_URL))

if ARGV.dryrun is True:
    print("UNKNOWN: DRYRUN COMPLETE", file=sys.stderr)
    sys.exit(3)

try:
    TIMEOUT = int(ARGV.timeout)
except ValueError:
    print("UNKNOWN: timeout should be an integer, not a string")
    sys.exit(3)

req = urllib.request.Request(FULL_URL)
try:
    with urllib.request.urlopen(req, timeout=TIMEOUT) as response:
        health_data = response.read()
        product_status = response.status
except urllib.error.HTTPError as err:
    print("CRITICAL: {}".format(err))
    sys.exit(2)


config = configparser.ConfigParser()
config.read_string("[DEFAULT]\n{}".format(str(health_data.decode("utf-8"))))


COUNTDOWN = bool(config["DEFAULT"][ARGV.option] in ["license-days-left"])

if COUNTDOWN is False:
    if float(config["DEFAULT"][ARGV.option]) > float(ARGV.critical):
        print("CRITICAL: {} is {}".format(ARGV.option, config["DEFAULT"][ARGV.option]))
        sys.exit(2)
    elif float(config["DEFAULT"][ARGV.option]) > float(ARGV.warning):
        print("WARNING: {} is {}".format(ARGV.option, config["DEFAULT"][ARGV.option]))
        sys.exit(1)
    else:
        print("OK: {} is {}".format(ARGV.option, config["DEFAULT"][ARGV.option]))
        sys.exit(0)

if COUNTDOWN is True:
    if float(config["DEFAULT"][ARGV.option]) < float(ARGV.warning):
        print("OK: {} is {}".format(ARGV.option, config["DEFAULT"][ARGV.option]))
        sys.exit(0)
    elif float(config["DEFAULT"][ARGV.option]) < float(ARGV.critical):
        print("WARNING: {} is {}".format(ARGV.option, config["DEFAULT"][ARGV.option]))
        sys.exit(1)
    else:
        print("CRITICAL: {} is {}".format(ARGV.option, config["DEFAULT"][ARGV.option]))
        sys.exit(2)


# RStudio Workbench health-check example
# active-sessions: 1
# idle-seconds: 0
# cpu-percent: 0.0
# memory-percent: 64.2
# swap-percent: 0.0
# load-average: 4.1
# license-status: Activated
# license-days-left: 153
# license-allow-product-usage: 1


# Nagios output codes
# OK - exit 0
# "OK - $countWarnings services in Warning state"
#
# WARNING - exit 1
# echo "WARNING - $countWarnings services in Warning state"
#
# CRITICAL - exit 2
# echo "CRITICAL - $countWarnings services in Warning state"
#
# UNKNOWN - exit 3
# echo "UNKNOWN - $countWarnings"
#

print("UNKNOWN: An unhandled error has occured")
sys.exit(3)
